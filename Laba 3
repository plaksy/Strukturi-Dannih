// 090304-РПИа-о24 Болгов Илья
#include <iostream>
#include <vector>
#include <list>
#include <queue>
#include <algorithm>
#include <limits>
using namespace std;

// Структура для представления графа
struct Graph {
    int n; // Количество остановок
    vector<vector<int>> adj; // Список смежности
    vector<vector<int>> routes; // Автобусные маршруты

    Graph(int n) : n(n), adj(n + 1), routes(0) {}

    // Добавление маршрута
    void addRoute(const vector<int>& route) {
        routes.push_back(route);
        for (size_t i = 0; i < route.size() - 1; ++i) {
            adj[route[i]].push_back(route[i + 1]);
            adj[route[i + 1]].push_back(route[i]); // Движение в обоих направлениях
        }
    }

    // Функция для поиска кратчайшего пути с учетом пересадок
    int shortestPath(int start, int end) {
        vector<int> dist(n + 1, numeric_limits<int>::max());
        dist[start] = 0;

        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, start});

        while (!pq.empty()) {
            int d = pq.top().first;
            int u = pq.top().second;
            pq.pop();

            if (d > dist[u]) continue;

            for (int v : adj[u]) {
                int weight = 1;
                bool sameRoute = false;
                for (const auto& route : routes) {
                    auto it_u = find(route.begin(), route.end(), u);
                    auto it_v = find(route.begin(), route.end(), v);

                    if (it_u != route.end() && it_v != route.end()) {
                        auto pos_u = distance(route.begin(), it_u);
                        auto pos_v = distance(route.begin(), it_v);

                        if(abs(pos_u - pos_v) == 1) { // соседние
                            sameRoute = true;
                            break;
                        }
                    }
                }

                if (!sameRoute) {
                    weight = 3;
                }

                if (dist[v] > dist[u] + weight) {
                    dist[v] = dist[u] + weight;
                    pq.push({dist[v], v});
                }
            }
        }

        return (dist[end] == numeric_limits<int>::max()) ? -1 : dist[end]; // -1, если пути нет
    }
};

// Реализация через массив
class RoutesArray {
private:
    vector<vector<int>> routes;

public:
    void addRoute(const vector<int>& route) {
        routes.push_back(route);
    }

    const vector<vector<int>>& getRoutes() const {
        return routes;
    }
};

// Реализация через связанный список
class RoutesList {
private:
    list<vector<int>> routes;

public:
    void addRoute(const vector<int>& route) {
        routes.push_back(route);
    }

    const list<vector<int>>& getRoutes() const {
        return routes;
    }
};

int main() {
    int n, r;
    cout << "Введите количество остановок: ";
    cin >> n;
    cout << "Введите количество маршрутов: ";
    cin >> r;

    Graph graph(n);

    cout << "Введите маршруты (последовательность остановок для каждого маршрута (0 для завершения ввода маршрута)):\n";

    RoutesArray routesArray;  // Использование массива
    RoutesList routesList;   // Использование связанного списка

    for (int i = 0; i < r; ++i) {
        vector<int> route;
        int stop;
        while (cin >> stop && stop != 0) {
            route.push_back(stop);
        }
        graph.addRoute(route);
        routesArray.addRoute(route);
        routesList.addRoute(route);
    }

    int start, end;
    cout << "Введите начальную остановку: ";
    cin >> start;
    cout << "Введите конечную остановку: ";
    cin >> end;

    int shortest_path = graph.shortestPath(start, end);

    if (shortest_path == -1) {
        cout << "Путь между остановками " << start << " и " << end << " не найден." << endl;
    } else {
        cout << "Кратчайшее время перемещения между остановками " << start << " и " << end << ": " << shortest_path << endl;
    }

    // Пример использования RoutesArray и RoutesList
    cout << "\nМаршруты, сохраненные в массиве:" << endl;
    for (const auto& route : routesArray.getRoutes()) {
        for (int stop : route) {
            cout << stop << " ";
        }
        cout << endl;
    }

    cout << "\nМаршруты, сохраненные в связанном списке:" << endl;
    for (const auto& route : routesList.getRoutes()) {
        for (int stop : route) {
            cout << stop << " ";
        }
        cout << endl;
    }

    return 0;
}
